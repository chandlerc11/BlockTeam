package Game;

import Game.GameConstants.*;
import Server.GameServer;

public class TetrisGame  {
	private GameServer gameServer;
	private boolean gameRunning;
	private volatile boolean running;
	private PlayingBoard PB;
	
	public TetrisGame(GameServer gameServer)
	{
		this.gameServer = gameServer;
		PB = new PlayingBoard(GameConstants.WIDTH, GameConstants.HEIGHT, this);
		gameRunning = false;
		start();
	}
	
	public void start()
	{
		
	}	

	
	
	public void sleep()
	{
		try {
			Thread.sleep(1);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public synchronized void sendDataToGamers()
	{
		gameServer.sendDataToGamers(PB.currentBoard());
	}

	public synchronized void gamersMove(GameMoves move) 
	{
		if(gameRunning)
		{
			if(GameMoves.PAUSE == move)
			{
				pauseGame();
			}
			else if(PB.gamerMove(move))
			{
				sendDataToGamers();					
			}	
		}
		else if(move == GameMoves.START)
		{
			startGame();
		}
	}
	
	public void startGame()
	{
		gameRunning = true;
	}
	
	public void pauseGame()
	{
		gameRunning = false;
	}

	public void restart() 
	{
		PB.restart();		
	}
	
	public void stop()
	{
		running = false;
	}

	public void gameOver() {
		// TODO Auto-generated method stub
		gameRunning = false;
		PB.restart();
		gameServer.sendDataToGamers("Game Over");
	}
	
	public class RunningGame implements Runnable
	{
		@Override
		public void run() 
		{
			running = true;
			while(running)
			{
				while(gameRunning)
				{
					System.out.println("Updating Game");
					long startTime = System.currentTimeMillis(); //fetch starting time
					PB.update();
					sendDataToGamers();
					while((System.currentTimeMillis() - startTime) < GameConstants.RATE)
					{
						sleep();
					}
				}			
				sleep();
			}		
		}	
	}
	
	
}
