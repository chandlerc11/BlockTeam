package Game;

import java.util.*;
import java.util.Map.Entry;

import Game.GameConstants.GameMoves;
import Game.Polyominoes.TetrisBlock;



public class PlayingBoard 
{
	private int width;
	private int height;
	private TetrisGame game; 
	private Polyominoes current;
	private boolean equilibrium;
	private Polyominoes.TetrisBlock [][] tetrisBoard;
	Queue<GameMoves> moveQueue;
	
	/**
	 * Constructor for TetrisBoard, starts the thread that handles incoming requests
	 * @param width
	 * @param height
	 * @param game
	 */
	public PlayingBoard(int width, int height, TetrisGame game)
	{
		this.game = game;
		this.width = width;
		this.height = height;
		equilibrium = true;
		moveQueue = new LinkedList<GameMoves>();
		tetrisBoard  =  new Polyominoes.TetrisBlock[width][height];
		
		//Thread to handle incoming requests
		start();
	}
	
	/**
	 * Starts Thread that handles incoming requests
	 */
	public void start()
	{
		Thread T = new Thread(new MoveHandler(this, moveQueue));
		T.start();
	}
	
	/**
	 * Used by MoveHandler to sned current TetrisBoard to gamers connected on server
	 */
	public void printScreen()
	{
		game.sendDataToGamers();
	}
	
	/**
	 * Recieves incoming requests from gamers on server and puts them in a queue that then MoveHandler will perform,
	 * one after the other.
	 * @param move
	 */
	public synchronized void addMoveToQueue(GameMoves move)
	{
		//FIFO
		moveQueue.add(move);
	}
	
	/**
	 * 
	 */
	private class MoveHandler implements Runnable
	{
		private PlayingBoard playingBoard;
		private Queue<GameMoves> moveQueue;
		private volatile boolean running;
		
		/**
		 * Constructor for MoveHandler
		 * @param playingBoard The TetrisBoard that MoveHandler will be modifying
		 * @param moveQueue The requests coming in 
		 */
		public MoveHandler(PlayingBoard playingBoard, Queue<GameMoves> moveQueue)
		{
			this.playingBoard = playingBoard;
			this.moveQueue = moveQueue;
			running = true;
		}
		
		/**
		 * Checks for new requests on the queue and executes them one by one.
		 */
		@Override
		public void run() 
		{
			while(running)
			{
				if(!moveQueue.isEmpty())
				{
					GameMoves move = moveQueue.poll();
					if(move == GameMoves.UPDATE)
					{
						playingBoard.update();
						playingBoard.printScreen();
					}
					else if(playingBoard.gamerMove(move))
					{
						playingBoard.printScreen();
					}
				}	
				else
				{
					sleep();					
				}
			}			
		}
		
		/**
		 * Pauses the thread for 1 ms to not put as much stress on the processor
		 */
		private void sleep()
		{
			try {
				Thread.sleep(1);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		/**
		 * Stops the thread
		 */
		public void stop()
		{
			running  = false;
		}
	}
	
	/**
	 * Creates a new piece and checks if the new piece overlaps another piece, if so it is a gameOver
	 */
	public void createNewPiece()
	{
		current = Polyominoes.createNewPiece(tetrisBoard);
		if(current == null)
		{
			game.gameOver();
		}
	}
	
	/**
	 * Moves the current piece down, checks if it hit the bottom, then checks if the TetrisBoard has made a full row and will
	 * delete it and bring other pieces down
	 */
	public void update()
	{	
		if(current == null)
		{
			createNewPiece();
			return;
		}
		//Move piece down		
		if(!current.action(GameConstants.GameMoves.DOWN))
		{
			equilibrium = false;
			//while !Equilibrium
			while(!equilibrium)
			{
				//check for lines to delete and delete them
				findAndDeleteLines();
				if(equilibrium)
				{
					break;
				}
				//After deleting lines, move all pieces down
				moveAllBlocksDown();
				printScreen();
			}
			//create a new piece
			createNewPiece();
		}	
	}
	
	/**
	 * Takes an incoming move and causes the current piece to perform move
	 * @param move The move the current piece will perform
	 * @return True if the piece was able to perform action, else false
	 */
	public boolean gamerMove(GameMoves move)
	{
		return current.action(move);
	}
	
	/**
	 * Moves all blocks down by checking if they are able to first
	 */
	private void moveAllBlocksDown() 
	{
		boolean keepChecking = true;
		
		while(keepChecking)
		{
			ArrayList<TetrisBlock> blockList = getAllBlocksOnBoard();
			Iterator<Polyominoes> polyIter = blocksToPolyominoes(blockList.iterator()).iterator();
			
			keepChecking = false;
			
			while(polyIter.hasNext())
			{
				if(!polyIter.next().down())
				{
					keepChecking = true;
				}
			}
			//loop back to top
		}		
	}
	
	/**
	 * Changes an array of TetrisBlocks to an array ofPolyominoes
	 * @param iter Iterator of TetrisBlocks
	 * @return
	 */
	private ArrayList<Polyominoes> blocksToPolyominoes(Iterator<TetrisBlock> iter)
	{
		ArrayList<Polyominoes> poly = new ArrayList<Polyominoes>();
		while(iter.hasNext())
		{
			Polyominoes polyominoe = iter.next().getParentPolyominoe();
			if(!poly.contains(polyominoe))
			{
				poly.add(polyominoe);
			}
		}
		return poly;
	}

	private void findAndDeleteLines() 
	{		
		Iterator<Polyominoes.TetrisBlock> iter = getAllBlocksOnBoard().iterator();
		
		HashMap<Integer, Stack<Polyominoes.TetrisBlock>> linesOnBoard = getBlocksPerLine(iter);
		
		Iterator<Entry<Integer, Stack<TetrisBlock>>> it = linesOnBoard.entrySet().iterator();

		equilibrium = true;
		
		while (it.hasNext()) {
	        Stack<TetrisBlock> line = it.next().getValue();
	        if(line.size() == width)
	        {
	    		equilibrium = false;
	    		removeLine(line);
	        }
	        it.remove(); // avoids a ConcurrentModificationException
	    }		
	}
	
	private void removeLine(Stack<TetrisBlock> line)
	{
		while(!line.empty())
		{
			line.pop().delete();
		}
	}
	
	private HashMap<Integer, Stack<TetrisBlock>> getBlocksPerLine(Iterator<Polyominoes.TetrisBlock> iter)
	{
		HashMap<Integer, Stack<Polyominoes.TetrisBlock>> linesOnBoard = new HashMap<Integer, Stack<Polyominoes.TetrisBlock>>();
		
		while(iter.hasNext())
		{
			Polyominoes.TetrisBlock block = iter.next();
			int blockHeight = block.getHeight();
			
			if(!linesOnBoard.containsKey(blockHeight))
			{
				Stack<TetrisBlock> line = new Stack<TetrisBlock>();
				linesOnBoard.put(blockHeight, line);
			}
			linesOnBoard.get(blockHeight).push(block);
		}
		return linesOnBoard;
	}
	
	public ArrayList<Polyominoes.TetrisBlock> getAllBlocksOnBoard()
	{
		ArrayList<Polyominoes.TetrisBlock> list = new ArrayList<Polyominoes.TetrisBlock>();
		for(int indexWidth = 0; indexWidth < width; indexWidth++)
		{
			for(int indexHeight = 0; indexHeight < height; indexHeight++)
			{
				Polyominoes.TetrisBlock block = tetrisBoard[indexWidth][indexHeight];
				if(block != null)
				{
					//Updates if the block is able to move down or not
					block.update();
					list.add(block);
				}
			}
		}		
		return list;
	}

	public String currentBoard() 
	{
		StringBuilder SB = new StringBuilder();
		
		Iterator<Polyominoes.TetrisBlock> iter = getAllBlocksOnBoard().iterator();
		
		while(iter.hasNext())
		{
			SB.append(iter.next().data());
			SB.append(";");
		}
			
		return SB.toString();
	}

	public void restart() 
	{
		tetrisBoard = new Polyominoes.TetrisBlock[width][height];
		current = null;
	}
}
